spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/order

    username: ${DB_USER}
    password: ${DB_PASSWORD}
  cloud:
    stream:
      bindings:
        createOrder-out-0:
          destination: order-exchange
#          destination: order-exchange.new
          content-type: application/json
      kafka:
        binder:
          brokers: localhost:9092
#      rabbit:
#        bindings:
#          createOrder-out-0:
#            producer:
##              routing-key-expression: '''order.tracking.new'''
#              routing-key-expression: '''order.tracking'''
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
#  rabbitmq:
#    host: ${RABBITMQ_HOST:localhost}
#    port: ${RABBITMQ_PORT:5672}
#    username: ${RABBITMQ_USERNAME:guest}
#    password: ${RABBITMQ_PASSWORD:guest}
#    virtual-host:  ${RABBITMQ_VHOST:guest}
#    connection: 30000 #millisecond

#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest

#  h2:
#    console:
#      enabled: true
#  datasource:
#    url: jdbc:h2:mem:test
#  jpa:
#    show-sql: true
#    hibernate:
#      ddl-auto: create

server:
  port: 8083

#rabbitmq:
#  exchange:
#    name: order.exchange
#  queue:
#    name: order.queue
#  routing:
#    key: order.tracking

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

  tracing:
    sampling:
      probability: 1.0

app:
  message: "hello"

eureka:
  client:
    serviceUrl:
      defaultZone: "http://localhost:8761/eureka/"
    register-with-eureka: true
    fetch-registry: true

logging:
  file:
    name: logs/${spring.application.name}.log
    logback:
    rollingpolicy:
      max-file-size: 5MB
      max-history: 7

#Circuit Breaker
resilience4j:
  circuitbreaker:
    instances:
      productService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: count_based
  retry:
    instances:
      retryBreaker:
        maxAttempts: 5
        waitDuration: 5s
  ratelimiter:
    instances:
      rateBreaker:
        timeout-duration: 0     # the Limits were reached they don't wait and instantly rejected
        limit-refresh-period: 4s # 4sec(sec is default)
        limit-for-period: 2     # 2 API Calls in a(every 4 seconds) given period of time