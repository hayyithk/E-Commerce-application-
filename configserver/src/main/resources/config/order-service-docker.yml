spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/orderdb
    username: ${DB_USER}
    password: ${DB_PASSWORD}
  cloud:
    stream:
      bindings:
        createOrder-out-0:
          destination: order-exchange
#          destination: order-exchange.new
          content-type: application/json
      kafka:
        binder:
          brokers: kafka:9092
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect

server:
  port: 8083

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_URL:http://zipkin:9411/api/v2/spans}

app:
  message: "hello"

eureka:
  client:
    serviceUrl:
      defaultZone: "http://eureka:8761/eureka/"
    register-with-eureka: true
    fetch-registry: true

logging:
  file:
    name: logs/${spring.application.name}.log
    logback:
    rollingpolicy:
      max-file-size: 5MB
      max-history: 7

#Circuit Breaker
resilience4j:
  circuitbreaker:
    instances:
      productService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: count_based
  retry:
    instances:
      retryBreaker:
        maxAttempts: 5
        waitDuration: 5s
  ratelimiter:
    instances:
      rateBreaker:
        timeout-duration: 0     # the Limits were reached they don't wait and instantly rejected
        limit-refresh-period: 4s # 4sec(sec is default)
        limit-for-period: 2     # 2 API Calls in a(every 4 seconds) given period of time